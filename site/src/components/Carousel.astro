---
import type { CollectionEntry } from "astro:content";
import { museumBaseUrl } from "@/lib/constants";
import { getMode } from "@/lib/mode";
import FixableRegion from "./FixableRegion.astro";

interface Props {
  entries: ImageEntry[];
}

type ImageEntry =
  | CollectionEntry<"blog">
  | CollectionEntry<"exhibits">
  | CollectionEntry<"products">;

const { entries } = Astro.props;

const collectionMap = {
  blog: {
    label: "Post",
    path: "blog",
  },
  exhibits: {
    label: "Exhibit",
    path: "collections",
  },
  products: {
    label: "Merch",
    path: "gift-shop"
  },
};
---

<div class:list={["carousel", getMode()]}>
  {
    entries.map((entry, i) => (
      <div
        class:list={["entry", !i && "in"]}
        style={{ backgroundImage: `url(${entry.data.image.src})` }}
        {...(i && getMode() === "fixed" && { inert: true })}
      >
        <FixableRegion>
          <div class="overline">L A T E S T &nbsp; {
            collectionMap[entry.collection].label.toUpperCase().split("").join(" ")
          }</div>
          <div slot="fixed" class="overline">Latest {collectionMap[entry.collection].label}</div>
        </FixableRegion>
        <div class="title">{entry.data.title}</div>
        <a
          class="button"
          href={`${museumBaseUrl}${collectionMap[entry.collection].path}/${entry.id}/`}
        >
          Read more
        </a>
      </div>
    ))
  }
</div>

<script>
  import { getMode } from "@/lib/mode";

  const carousels = document.querySelectorAll(".carousel");

  // TODO: fixed mode will need to be able to cancel/restart this
  setInterval(() => {
    carousels.forEach((el) => {
      el.querySelector(".out")?.classList.toggle("out");
      
      const previousEl = el.querySelector(".in")!;
      previousEl.classList.toggle("in");
      previousEl.classList.toggle("out");
      
      const nextEl = previousEl.nextElementSibling || el.firstElementChild;
      nextEl?.classList.toggle("in");
      
      if (getMode() === "fixed") {
        (previousEl as HTMLElement).inert = true;
        (nextEl as HTMLElement).inert = false;
      }
    });
  }, 10000);
</script>

<style define:vars={{ cursorUrl: `url(${import.meta.env.BASE_URL}radial-cursor.png)` }}>
  .carousel {
    height: 80vh;
    overflow: hidden;
    position: relative;
  }

  .entry {
    background: center / cover no-repeat;
    color: var(--white);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: calc(1rem * var(--ms5));
    position: absolute;
    inset: 0;
    text-align: center;
    /* Use negative z-index to avoid interfering with e.g. nav menu */
    z-index: -2;

    &.in {
      z-index: 0;
    }

    &.out {
      z-index: -1;
    }

    &::before {
      background-color: rgba(0, 0, 0, 0.4);
      content: "";
      position: absolute;
      inset: 0;
    }
  }

  .overline {
    font-size: calc(1rem * var(--ms3));
  }

  .title {
    font-family: var(--title-font-family);
    font-size: calc(1rem * var(--ms10));
  }

  a {
    border-radius: 9999px;
    padding: 1rem 2rem;
    letter-spacing: calc(1rem * var(--ms3))
    text-decoration: none;
    text-transform: uppercase;
  }

  .broken {
    & :global(.entry) {
      cursor: var(--cursorUrl) 16 16, crosshair;
      transition: transform 1s ease-in;
      transform: translateX(100%);

      & > * {
        opacity: 0;
      }

      &::before {
        transition: opacity 300ms ease-in 1.5s;
      }
    }

    & .overline {
      transform: translateY(-100%);
      transition: all 300ms ease-in 2s;
    }

    & .title {
      transform: scale(0.4);
      transition: all 300ms ease-in 1.5s;
    }

    & a {
      transform: translateY(100%);
      transition: all 300ms ease-in 2.5s;
    }

    & .entry.in > * {
      opacity: 1;
    }

    & .entry.out > * {
      transition: opacity 300ms ease-in;
    }

    & .entry.in,
    & .entry.out {
      transform: translateX(0);

      & .overline,
      & a {
        transform: translateY(0);
      }

      & .title {
        transform: scale(1);
      }
    }
  }

  .fixed {
    & :global(.entry) {
      transition: opacity 1s ease-in;
      opacity: 0;

      &.in {
        opacity: 1;
      }

      &.out {
        transition-delay: 1s;
      }

      &::before {
        z-index: -1;
      }
    }

    & .overline {
      letter-spacing: calc(1rem * var(--ms4));
      text-transform: uppercase;
    }
  }
</style>
